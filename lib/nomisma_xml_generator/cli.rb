# frozen_string_literal: true

require 'thor'

module NomismaXmlGenerator
  ##
  # Command line interface for generating numsimatic RDF
  class Cli < Thor
    # desc 'scrape_and_generate_rdf', 'Collect all coin information and generate RDF'
    # option :output_dir, desc: 'Path to output directory', alias: 'o', default: 'data'
    # option :coin_list_path, desc: 'Path to coin-list.txt generated by catalog list scraper', alias: 'l', default: 'data/coin-list.txt'
    # def scrape_and_generate_rdf
    #   scrape_catalog_list
    #   scrape_catalog_detail
    #   generate_xml
    # end

    desc 'scrape_catalog_list', 'Collect all coin IDs from the catalog'
    option :output_dir, desc: 'Path to output directory', alias: 'o', default: 'data'
    def scrape_catalog_list
      output_dir = options[:output_dir]

      list_scraper = NomismaXmlGenerator::CatalogListScraper.new(output_dir: output_dir)
      list_scraper.scrape_coin_list
      list_scraper.write_coin_list
      puts 'Scraped coin list and wrote to coin-list.txt'
    end

    desc 'scrape_catalog_detail', 'Collect all coin details from catalog'
    option :output_dir, desc: 'Path to output directory', alias: 'o', default: 'data/raw'
    option :coin_list_path, desc: 'Path to coin-list.txt generated by catalog list scraper', alias: 'l', default: 'data/coin-list.txt'
    option :continue, desc: 'Should scraping continue from where it left off (was an error raised?)', alias: 'c', default: false, type: :boolean
    def scrape_catalog_detail
      output_dir = options[:output_dir]
      detail_scraper = NomismaXmlGenerator::CatalogDetailScraper.new(options[:coin_list_path], output_dir: output_dir, continue: options[:continue])
      detail_scraper.collect_all_coins
      puts "Scraped coin details and wrote to #{output_dir}"
    end

    desc 'generate_xml', 'Parse the JSON data collected from the catalog and use it to generate XML'
    option :json_dir, desc: 'Path to the directory of raw JSON files', default: 'data/raw'
    option :output_dir, desc: 'Directory where princeton-nomisma.rdf will be written', default: 'data'
    option :mapper_csv_path, desc: 'Path to CSV that maps IDs to their numismatic reference links', default: 'nomisma-mapper.csv'
    def generate_xml
      coin_list_path = File.join(options[:output_dir], 'coin-list.txt')
      collection = NomismaXmlGenerator::CoinCollection.new(options[:json_dir], coin_list_path: coin_list_path)
      puts "Collected and parsed JSON data"

      collection.apply_reference_link(options[:mapper_csv_path])
      puts "Added reference links"

      xml_path = File.join(options[:output_dir], 'princeton-nomisma.rdf')
      xml_factory = NomismaXmlGenerator::XmlFactory.new(collection)
      xml_factory.write_xml(xml_path)
      puts "Generated RDF and wrote to #{xml_path}"
    end
  end
end
